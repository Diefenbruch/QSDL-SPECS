SYSTEM ClientServer;

/*
 * Externe Synonyme zur Anpassung der Systemparameter:
 */
 
SYNONYM NUM_OF_CLIENTS Natural = EXTERNAL;
SYNONYM NUM_OF_READ_CLIENTS Natural = NUM_OF_CLIENTS / 2;
SYNONYM NUM_OF_WRITE_CLIENTS Natural = NUM_OF_CLIENTS - NUM_OF_READ_CLIENTS;

SYNONYM LOWER_RPC_DELAY Duration = EXTERNAL;
SYNONYM UPPER_RPC_DELAY Duration = EXTERNAL;
SYNONYM MEDIUM_RPC_DELAY Duration = LOWER_RPC_DELAY +
                                    (UPPER_RPC_DELAY -
                                     LOWER_RPC_DELAY) / 2;
SYNONYM LOWER_CREATION_DELAY Real = EXTERNAL;
SYNONYM UPPER_CREATION_DELAY Real = EXTERNAL;
SYNONYM MEDIUM_CREATION_DELAY Real = LOWER_CREATION_DELAY +
                                     (UPPER_CREATION_DELAY -
                                      LOWER_CREATION_DELAY) / 2;
SYNONYM LOWER_BYTE_SIZE Integer = EXTERNAL;
SYNONYM UPPER_BYTE_SIZE Integer = EXTERNAL;
SYNONYM MEDIUM_BYTE_SIZE Integer = LOWER_BYTE_SIZE +
                                    (UPPER_BYTE_SIZE -
                                     LOWER_BYTE_SIZE) / 2;
SYNONYM SERVER1_NUM Natural = EXTERNAL;
SYNONYM SERVER1_READ Real = EXTERNAL;
SYNONYM SERVER1_WRITE Real = EXTERNAL;

SYNONYM SERVER2_NUM Natural = EXTERNAL;
SYNONYM SERVER2_READ Real = EXTERNAL;
SYNONYM SERVER2_WRITE Real = EXTERNAL;

BLOCK B1 REFERENCED;

ENDSYSTEM;

BLOCK B1;

/*
 * Signale, die von Client- an Stub-Prozesse gesendet werden:
 */
 
SIGNAL Read(Natural),
       Write(Natural);

/*
 * Signale, die von Stub- an Client-Prozesse gesendet werden:
 */

SIGNAL Acknowledge;

/*
 * Datentypen fuer Signalparameter:
 */
 
NEWTYPE ReadOrWrite
  LITERALS Read, Write;
ENDNEWTYPE ReadOrWrite;

/*
 * Diensttypen fuer den Stub-Prozess und die Maschinen:
 */
 
MACHINESERVICE Write(Natural), Read(Natural);

/*
 * Deklaration aller Prozesstypen:
 */
 
PROCESS Source(1,1) REFERENCED;
PROCESS Client(0,NUM_OF_CLIENTS) REFERENCED;
PROCESS Stub(0,NUM_OF_CLIENTS) REFERENCED;

/*
 * Deklaration aller Maschinen:
 */

MACHINE Server1 REFERENCED;
MACHINE Server2 REFERENCED;

/*
 * Links zur Verbindung der Stub-Prozesse mit den Maschinen:
 */
 
LINK ServerLink1 FROM Stub to Server1 with Read, Write;
LINK ServerLink2 FROM Stub to Server2 with Read, Write;

/*
 * Blockweite Sensoren:
 */
 
SENSOR client_time LIFETIMEPROCESS(client);

ENDBLOCK;

PROCESS Source(1, 1);

  DCL read_clients_remaining Natural := NUM_OF_READ_CLIENTS;
  DCL write_clients_remaining Natural := NUM_OF_WRITE_CLIENTS;
  DCL create_delay Duration;
  DCL num_of_bytes Natural;
  
  START;
    DECISION ANY;
      (): TASK create_delay := LOWER_CREATION_DELAY;
      (): TASK create_delay := UPPER_CREATION_DELAY;
      (): TASK create_delay := MEDIUM_CREATION_DELAY;
    ENDDECISION;

    NEXTSTATE CreateClients;
    
  STATE CreateClients AWAKE create_delay;
    PROVIDED read_clients_remaining > 0;
      DECISION ANY;
        (): TASK num_of_bytes := LOWER_BYTE_SIZE;
        (): TASK num_of_bytes := UPPER_BYTE_SIZE;
        (): TASK num_of_bytes := MEDIUM_BYTE_SIZE;
      ENDDECISION;
      
      CREATE Client(Read, num_of_bytes);
      TASK read_clients_remaining := read_clients_remaining - 1;

      DECISION ANY;
        (): TASK create_delay := LOWER_CREATION_DELAY;
        (): TASK create_delay := UPPER_CREATION_DELAY;
        (): TASK create_delay := MEDIUM_CREATION_DELAY;
      ENDDECISION;

      NEXTSTATE -;

    PROVIDED write_clients_remaining > 0;
      DECISION ANY;
        (): TASK num_of_bytes := LOWER_BYTE_SIZE;
        (): TASK num_of_bytes := UPPER_BYTE_SIZE;
        (): TASK num_of_bytes := MEDIUM_BYTE_SIZE;
      ENDDECISION;
      
      CREATE Client(Write, num_of_bytes);
      TASK write_clients_remaining := write_clients_remaining - 1;
      
      DECISION ANY;
        (): TASK create_delay := LOWER_CREATION_DELAY;
        (): TASK create_delay := UPPER_CREATION_DELAY;
        (): TASK create_delay := MEDIUM_CREATION_DELAY;
      ENDDECISION;
      
      NEXTSTATE -;

    PROVIDED (read_clients_remaining = 0) AND
             (write_clients_remaining = 0);
      TASK create_delay := 100000; /* don't set to zero! */
      NEXTSTATE -;

  ENDSTATE;
  
ENDPROCESS;

PROCESS Client(0, NUM_OF_CLIENTS);
FPAR read_or_write ReadOrWrite,
     num_of_bytes Natural;

DCL HIST my_stub PID;
DCL rpc_delay Duration;

  START;
    CREATE Stub;
    TASK my_stub := offspring;
    DECISION ANY;
      (): TASK rpc_delay := LOWER_RPC_DELAY;
      (): TASK rpc_delay := LOWER_RPC_DELAY;
      (): TASK rpc_delay := MEDIUM_RPC_DELAY;
    ENDDECISION;
    NEXTSTATE RPC;
    
  STATE RPC;
    INPUT NONE;
      DECISION read_or_write;
        (Read): OUTPUT Read(num_of_bytes) TO my_stub DELAY rpc_delay;
        (Write): OUTPUT Write(num_of_bytes) TO my_stub DELAY rpc_delay;
      ENDDECISION;
      NEXTSTATE WaitForAck;
  ENDSTATE;
  
  STATE WaitForAck;    
    INPUT Acknowledge;
      STOP;
  ENDSTATE;
  
ENDPROCESS;

MACHINE Server1;
  SERVER SERVER1_NUM;
  DISCIPLINE FCFS;             
  OFFERS Write : SERVER1_WRITE;
  OFFERS Read : SERVER1_READ;
  SENSOR util UTILIZATION;   
  SENSOR qlength QUEUELENGTH;   
ENDMACHINE;

MACHINE Server2;
  SERVER SERVER2_NUM;
  DISCIPLINE FCFS;             
  OFFERS Write : SERVER2_WRITE;
  OFFERS Read : SERVER2_READ;
  SENSOR util UTILIZATION;   
  SENSOR qlength QUEUELENGTH;   
ENDMACHINE;

PROCESS Stub(0, NUM_OF_CLIENTS);

DCL num_of_bytes Natural;
DCL rpc_delay Duration;
DCL population_server1 Natural;
DCL population_server2 Natural;

  START;
    DECISION ANY;
      (): TASK rpc_delay := LOWER_RPC_DELAY;
      (): TASK rpc_delay := LOWER_RPC_DELAY;
      (): TASK rpc_delay := MEDIUM_RPC_DELAY;
    ENDDECISION;
    
    NEXTSTATE RequestServer;
    
  STATE RequestServer;
    INPUT Read(num_of_bytes);
      TASK population_server1 := LastValue(<< MACHINE Server1>> qlength);
      TASK population_server2 := LastValue(<< MACHINE Server2>> qlength);

      DECISION population_server1 <= population_server2;
        (TRUE): REQUEST Read(num_of_bytes) FROM Server1;
        (FALSE): REQUEST Read(num_of_bytes) FROM Server2;
      ENDDECISION;
      OUTPUT Acknowledge TO SENDER DELAY rpc_delay;
                                                   
      STOP;                                        

    INPUT Write(num_of_bytes);                       
      DECISION ANY;
        (): REQUEST Write(num_of_bytes) FROM Server1;
            REQUEST Write(num_of_bytes) FROM Server2;
        (): REQUEST Write(num_of_bytes) FROM Server2;
            REQUEST Write(num_of_bytes) FROM Server1;
      ENDDECISION;
      OUTPUT Acknowledge TO SENDER DELAY rpc_delay;  
                                                     
      STOP;                                          
  ENDSTATE;
  
ENDPROCESS;

ATOM noMoreReadClients := <<BLOCK B1>> source!read_clients_remaining = 0;
ATOM noMoreWriteClients := <<BLOCK B1>> source!write_clients_remaining = 0;
ATOM highUtilServer1 := Average(<<BLOCK B1 / MACHINE Server1>> util) >= 0.5;
ATOM idleServer1 := LastValue(<<BLOCK B1 / MACHINE Server1>> qlength) = 0;
ATOM highUtilServer2 := Average(<<BLOCK B1 / MACHINE Server2>> util) >= 0.5;
ATOM idleServer2 := LastValue(<<BLOCK B1 / MACHINE Server2>> qlength) = 0;
ATOM lowVarClientTime := VarCoeff(<<BLOCK B1>>client_time) < 0.4;
